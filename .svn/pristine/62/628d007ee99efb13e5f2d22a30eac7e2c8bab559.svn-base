package com.leixiaohua1020.sffmpegandroidtranscoder;

import android.app.Activity;
import android.hardware.Camera;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Environment;
import android.os.Bundle;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.os.Bundle;
import android.os.Environment;
import android.app.Activity;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.content.Context;

import java.io.File;
import java.io.IOException;
import java.util.Calendar;

public class MediaRecorder_c extends Activity implements SurfaceHolder.Callback {

    private static final String TAG = "MainActivity";
    private SurfaceView mSurfaceview;
    private Button mBtnStart;
    
    private boolean mStartedFlg = false;//是否正在录像
    private MediaRecorder mRecorder;
    private SurfaceHolder mSurfaceHolder;
    private Camera camera;
    private MediaPlayer mediaPlayer;
    private String path;
    private TextView textView;
    private int text = 0;

    private android.os.Handler handler = new android.os.Handler();
    private Runnable runnable = new Runnable() {
        @Override
        public void run() {
            text++;
            textView.setText(text+"");
            handler.postDelayed(this,1000);
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.media_recorder);

        mSurfaceview = (SurfaceView) findViewById(R.id.surfaceview);
        mBtnStart = (Button) findViewById(R.id.imageviewStartStop);
        textView = (TextView)findViewById(R.id.mc_text);
        mBtnStart.setText("开始");
       
	   
        mBtnStart.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {       
      
    	if (!mStartedFlg) {
    		mBtnStart.setBackgroundResource(R.drawable.stop);
    		mBtnStart.setText("停止");
        	handler.postDelayed(runnable,1000);
            if (mRecorder == null) {
                mRecorder = new MediaRecorder();
            }
			if(camera==null){
				camera = Camera.open();
			}
			
            if (camera != null) {
                camera.unlock();
                mRecorder.setCamera(camera);
            }

            try {
                // 这两项需要放在setOutputFormat之前
                mRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
                mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);

                // Set output file format
               mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);

                // 这两项需要放在setOutputFormat之后
                mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
                mRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.MPEG_4_SP);

               mRecorder.setVideoSize(1280,720);
            //   mRecorder.setVideoSize(720,576);
                
             //   mRecorder.setVideoFrameRate(30);
            //    mRecorder.setVideoEncodingBitRate(3 * 1024 * 1024);
            //    mRecorder.setOrientationHint(0);
                //设置记录会话的最大持续时间（毫秒）
            //    mRecorder.setMaxDuration(60 * 1000);
                mRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());
              
				if(Parameter.addr==1){
					path = "/mnt/udisk1";
				}
				else if(Parameter.addr==2){
					path = "/mnt/sdcard2";
				}
				else if(Parameter.addr==3){
					path = "/mnt/sdcard";
				}
               
               
                if (path != null) {
                    File dir = new File(path + "/recordtest");
                    if (!dir.exists()) {
                        dir.mkdir();
                    }
                    path = dir + "/" + getDate() + ".mp4";
                    mRecorder.setOutputFile(path);
                    mRecorder.prepare();
                    mRecorder.start();
                    mStartedFlg = true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
            //stop
    	else{   
    		if (mStartedFlg) {
                try {
                	mBtnStart.setBackgroundResource(R.drawable.start);
                    handler.removeCallbacks(runnable);
                    mRecorder.stop();
                    mRecorder.reset();
                    mRecorder.release();
                    mRecorder = null;
                    mBtnStart.setText("开始");
                    if (camera != null) {
                        camera.release();
                        camera = null;
                    }
                  
                  
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
    		  
            mStartedFlg = false;
            MediaRecorder_c.this.finish();
       

		}
	}
			
});
        SurfaceHolder holder = mSurfaceview.getHolder();
        holder.addCallback(this);
        // setType必须设置，要不出错.
        holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);

}

    @Override
    protected void onResume() {
        super.onResume();
        if (!mStartedFlg) {
        }
    }

    /**
     * 获取系统时间
     *
     * @return
     */
    public static String getDate() {
        Calendar ca = Calendar.getInstance();
        int year = ca.get(Calendar.YEAR);           // 获取年份
        int month = ca.get(Calendar.MONTH);         // 获取月份
        int day = ca.get(Calendar.DATE);            // 获取日
        int minute = ca.get(Calendar.MINUTE);       // 分
        int hour = ca.get(Calendar.HOUR);           // 小时
        int second = ca.get(Calendar.SECOND);       // 秒

        String date = "" + year + (month + 1) + day + hour + minute + second;
        Log.d(TAG, "date:" + date);

        return date;
    }

    /**
     * 获取SD path
     *
     * @return
     */
    public String getSDPath() {
        File sdDir = null;
        boolean sdCardExist = Environment.getExternalStorageState()
                .equals(android.os.Environment.MEDIA_MOUNTED); // 判断sd卡是否存在
        if (sdCardExist) {
            sdDir = Environment.getExternalStorageDirectory();// 获取跟目录
            return sdDir.toString();
        }

        return null;
    }

    @Override
    public void surfaceCreated(SurfaceHolder surfaceHolder) {
        mSurfaceHolder = surfaceHolder;
		if (camera == null) {
			camera = CameraCheck.getCameraInstance(this);
		}
		try {
			if(camera!=null){
				camera.setPreviewDisplay(surfaceHolder); 
				camera.startPreview();
			}
		} catch (IOException e) {
			if (null != camera) {
				camera.release();
				camera = null;
			}
			e.printStackTrace();
		}
    }

    @Override
    public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i1, int i2) {
        // 将holder，这个holder为开始在onCreate里面取得的holder，将它赋给mSurfaceHolder
        mSurfaceHolder = surfaceHolder;
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
        mSurfaceview = null;
        mSurfaceHolder = null;
        handler.removeCallbacks(runnable);
        if (mRecorder != null) {
            mRecorder.release(); 
            mRecorder = null;
            Log.d(TAG, "surfaceDestroyed release mRecorder");
        }
        if (camera != null) {
            camera.release();
            camera = null;
        }
        if (mediaPlayer != null){
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }
   
}